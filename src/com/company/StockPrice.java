package com.company;/** * Created by Hoshiko on 11/13/15. *//*      Suppose we could access yesterday's stock prices as a list, where:        The indices are the time in minutes past trade opening time, which was 9:30am local time.        The values are the price in dollars of Apple stock at that time.        So if the stock cost $500 at 10:30am, stock_prices_yesterday[60] = 500.        Write an efficient function that takes stock_prices_yesterday and returns the best profit        I could have made from 1 purchase and 1 sale of 1 Apple stock yesterday.        For example:                stock_prices_yesterday = [10, 7, 5, 8, 11, 9]                get_max_profit(stock_prices_yesterday)                # returns 6 (buying for $5 and selling for $11)        No "shorting"â€”you must buy before you sell.        You may not buy and sell in the same time step (at least 1 minute must pass).*/public class StockPrice{    static int currentLowest;    static int currentHighest;    public static Integer getBestMargin (int [] stockPricesYesterday){       int N = stockPricesYesterday.length;       if(N != 0){           int currentMargin = 0;           int newLower;           int newHigher;           int newMargin;           currentLowest = stockPricesYesterday[0];           currentHighest = stockPricesYesterday[0];           for (int i = 0 ; i < N-1 ; i++){               int j = i+1;               if(stockPricesYesterday[i] < stockPricesYesterday[j]){                   newHigher = stockPricesYesterday[j];                   newLower = stockPricesYesterday[i];                   if (newLower < currentLowest){                       currentLowest = newLower;                       currentHighest = 0;                   }else if (newHigher > currentHighest){                       currentHighest = newHigher;                   }               }else{                   newLower = stockPricesYesterday[j];                   newHigher = stockPricesYesterday[i];                   if (newLower < currentLowest){                       currentLowest = newLower;                       currentHighest = 0;                   }else if (newHigher > currentHighest){                       currentHighest = newHigher;                   }               }               newMargin = currentHighest - currentLowest;               if (newMargin > currentMargin){                   currentMargin = newMargin;               }               //           System.out.println("Current h: " + currentHighest);               //           System.out.println("Current L: " + currentLowest);               //           System.out.println("new margin: " + newMargin);               //           System.out.println("Current Margin: " + currentMargin);               //           System.out.println("");           }           return currentMargin;       }else{           return null;       }   }}